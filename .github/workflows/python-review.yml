name: Python Review

on:
  pull_request:
    paths:
      - '**.py'

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black mypy bandit
      
      - name: Run Ruff
        id: ruff
        continue-on-error: true
        run: |
          echo "## Ruffによるコードスタイルチェック" > ruff.log
          ruff check . >> ruff.log 2>&1
          echo $? > ruff.exit_code

      - name: Run Black
        id: black
        continue-on-error: true
        run: |
          echo "## Blackによるコードフォーマットチェック" > black.log
          black --check --diff . >> black.log 2>&1
          echo $? > black.exit_code

      - name: Run MyPy
        id: mypy
        continue-on-error: true
        run: |
          echo "## MyPyによる型チェック" > mypy.log
          mypy --strict --show-error-codes --show-column-numbers --pretty src/example/ >> mypy.log 2>&1
          echo $? > mypy.exit_code

      - name: Run Bandit
        id: bandit
        continue-on-error: true
        run: |
          echo "## Banditによるセキュリティチェック" > bandit.log
          bandit -r -f txt -ll src/example/ >> bandit.log 2>&1
          echo $? > bandit.exit_code

      - name: Post Review Comment
        if: always()
        run: |
          {
            echo "# Pythonコードレビュー結果"
            echo ""
            echo "## 1. Ruffによるコードスタイルチェック"
            cat ruff.log || echo "Ruffのチェックに失敗しました"
            echo ""
            echo "## 2. Blackによるコードフォーマットチェック"
            cat black.log || echo "Blackのチェックに失敗しました"
            echo ""
            echo "## 3. MyPyによる型チェック"
            cat mypy.log || echo "MyPyのチェックに失敗しました"
            echo ""
            echo "## 4. Banditによるセキュリティチェック"
            cat bandit.log || echo "Banditのチェックに失敗しました"
            echo ""
            ruff_exit=$(cat ruff.exit_code || echo "0")
            black_exit=$(cat black.exit_code || echo "0")
            mypy_exit=$(cat mypy.exit_code || echo "0")
            bandit_exit=$(cat bandit.exit_code || echo "0")

            if [ "$ruff_exit" != "0" ] || [ "$black_exit" != "0" ] || [ "$mypy_exit" != "0" ] || [ "$bandit_exit" != "0" ]; then
              echo "⚠️ **CIチェックが失敗しました。上記の問題を修正してください。**"
              echo ""
              echo "### エラー詳細"
              [ "$ruff_exit" != "0" ] && echo "- Ruff: コードスタイルの問題があります"
              [ "$black_exit" != "0" ] && echo "- Black: フォーマットの問題があります"
              [ "$mypy_exit" != "0" ] && echo "- MyPy: 型チェックの問題があります"
              [ "$bandit_exit" != "0" ] && echo "- Bandit: セキュリティの問題があります"
            fi
          } > review.log

          gh pr comment --body-file review.log "${{ github.event.pull_request.html_url }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check Tool Results
        if: always()
        run: |
          ruff_exit=$(cat ruff.exit_code || echo "0")
          black_exit=$(cat black.exit_code || echo "0")
          mypy_exit=$(cat mypy.exit_code || echo "0")
          bandit_exit=$(cat bandit.exit_code || echo "0")
          
          if [ "$ruff_exit" != "0" ] || [ "$black_exit" != "0" ] || [ "$mypy_exit" != "0" ] || [ "$bandit_exit" != "0" ]; then
            echo "以下のチェックが失敗しました:"
            [ "$ruff_exit" != "0" ] && echo "- Ruff"
            [ "$black_exit" != "0" ] && echo "- Black"
            [ "$mypy_exit" != "0" ] && echo "- MyPy"
            [ "$bandit_exit" != "0" ] && echo "- Bandit"
            exit 1
          fi

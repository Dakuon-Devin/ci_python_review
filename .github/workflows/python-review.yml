name: Python Review

on:
  pull_request:
    paths:
      - '**.py'

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black mypy bandit
      
      - name: Run Ruff linter
        id: ruff
        continue-on-error: true
        run: |
          OUTPUT=$(ruff check . 2>&1) || echo "::set-output name=error::$OUTPUT"
      
      - name: Run Black formatter check
        id: black
        continue-on-error: true
        run: |
          OUTPUT=$(black --check . 2>&1) || echo "::set-output name=error::$OUTPUT"
      
      - name: Run MyPy type checker
        id: mypy
        continue-on-error: true
        run: |
          OUTPUT=$(mypy . 2>&1) || echo "::set-output name=error::$OUTPUT"
      
      - name: Run Bandit security check
        id: bandit
        continue-on-error: true
        run: |
          OUTPUT=$(bandit -r . -ll 2>&1) || echo "::set-output name=error::$OUTPUT"
      
      - name: Create review comment
        if: |
          steps.ruff.outcome == 'failure' ||
          steps.black.outcome == 'failure' ||
          steps.mypy.outcome == 'failure' ||
          steps.bandit.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const errors = [];
            
            if (process.env.RUFF_ERROR) {
              errors.push('### Ruff Linter\n```\n' + process.env.RUFF_ERROR + '\n```');
            }
            if (process.env.BLACK_ERROR) {
              errors.push('### Black Formatter\n```\n' + process.env.BLACK_ERROR + '\n```');
            }
            if (process.env.MYPY_ERROR) {
              errors.push('### MyPy Type Checker\n```\n' + process.env.MYPY_ERROR + '\n```');
            }
            if (process.env.BANDIT_ERROR) {
              errors.push('### Bandit Security Check\n```\n' + process.env.BANDIT_ERROR + '\n```');
            }
            
            if (errors.length > 0) {
              const body = '## Pythonコードレビュー結果\n\n' + errors.join('\n\n');
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                body: body,
                event: 'REQUEST_CHANGES'
              });
            }
        env:
          RUFF_ERROR: ${{ steps.ruff.outputs.error }}
          BLACK_ERROR: ${{ steps.black.outputs.error }}
          MYPY_ERROR: ${{ steps.mypy.outputs.error }}
          BANDIT_ERROR: ${{ steps.bandit.outputs.error }}

name: Python Review

on:
  pull_request:
    paths:
      - '**.py'

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black mypy bandit
      
      - name: Run Ruff linter
        id: ruff
        continue-on-error: true
        run: |
          ruff check . > ruff_output.txt || true
          
      - name: Run Black formatter check
        id: black
        continue-on-error: true
        run: |
          black --check . > black_output.txt 2>&1 || true
          
      - name: Run MyPy type checker
        id: mypy
        continue-on-error: true
        run: |
          mypy . > mypy_output.txt 2>&1 || true
          
      - name: Run Bandit security check
        id: bandit
        continue-on-error: true
        run: |
          bandit -r . -ll > bandit_output.txt 2>&1 || true
          
      - name: Create review comments
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let hasErrors = false;
            let reviewBody = '## Pythonコードレビュー結果\n\n';
            
            // Ruffの結果を確認
            try {
              const ruffOutput = fs.readFileSync('ruff_output.txt', 'utf8');
              if (ruffOutput.trim()) {
                hasErrors = true;
                reviewBody += '### Ruff Linter\n```\n' + ruffOutput + '\n```\n\n';
              }
            } catch (e) {}
            
            // Blackの結果を確認
            try {
              const blackOutput = fs.readFileSync('black_output.txt', 'utf8');
              if (blackOutput.includes('would reformat') || blackOutput.includes('Oh no!')) {
                hasErrors = true;
                reviewBody += '### Black Formatter\n```\n' + blackOutput + '\n```\n\n';
              }
            } catch (e) {}
            
            // MyPyの結果を確認
            try {
              const mypyOutput = fs.readFileSync('mypy_output.txt', 'utf8');
              if (mypyOutput.trim()) {
                hasErrors = true;
                reviewBody += '### MyPy Type Checker\n```\n' + mypyOutput + '\n```\n\n';
              }
            } catch (e) {}
            
            // Banditの結果を確認
            try {
              const banditOutput = fs.readFileSync('bandit_output.txt', 'utf8');
              if (banditOutput.includes('Issue:')) {
                hasErrors = true;
                reviewBody += '### Bandit Security Check\n```\n' + banditOutput + '\n```\n\n';
              }
            } catch (e) {}
            
            if (hasErrors) {
              // レビューコメントを作成
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                body: reviewBody,
                event: 'REQUEST_CHANGES'
              });
              
              // ジョブを失敗として終了
              process.exit(1);
            } else {
              // 問題がない場合は承認
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                body: '## Pythonコードレビュー結果\n\nすべてのチェックに合格しました！ ✨',
                event: 'APPROVE'
              });
            }
        env:
          RUFF_ERROR: ${{ steps.ruff.outputs.error }}
          BLACK_ERROR: ${{ steps.black.outputs.error }}
          MYPY_ERROR: ${{ steps.mypy.outputs.error }}
          BANDIT_ERROR: ${{ steps.bandit.outputs.error }}
